services:
  app:
    profiles:
      - app
    build:
      context: .
      dockerfile: Dockerfile
    image: flink-cdc-example:develop
    depends_on:
      kafka:
        condition: service_healthy
      mysql:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      - CONFIG_FILE=/opt/flink/config.toml
    volumes:
      - ./docker.config.toml:/opt/flink/config.toml:ro

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"   # PLAINTEXT (external clients)
      - "29092:29092" # PLAINTEXT_INTERNAL (other Docker services)
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093

      # Define all listeners:
      #  - PLAINTEXT for external clients (port 9092)
      #  - PLAINTEXT_INTERNAL for internal Docker-to-Docker traffic (port 29092)
      #  - CONTROLLER for KRaft controller quorum (port 9093)
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_INTERNAL://:29092,CONTROLLER://:9093

      # Advertise:
      #  - PLAINTEXT at localhost:9092 (so host apps use localhost:9092)
      #  - PLAINTEXT_INTERNAL at kafka:29092 (so other containers use kafka:29092)
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions.sh", "--bootstrap-server", "localhost:9092" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    volumes:
      - kafka_data:/bitnami/kafka/data

  kafka-init:
    image: bitnami/kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      /bin/sh -c '
        # create our CDC topic
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 \
          --create --if-not-exists \
          --topic orders_cdc --partitions 2 --replication-factor 1;
      '

  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=secret
      - MYSQL_USER=debezium
      - MYSQL_PASSWORD=dbz
      - MYSQL_DATABASE=inventory
    volumes:
      # Initialize the db
      - ./infra/mysql:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-psecret" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  connect:
    image: debezium/connect:2.7.3.Final
    container_name: connect
    depends_on:
      kafka:
        condition: service_healthy
      mysql:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      - BOOTSTRAP_SERVERS=kafka:29092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
      - KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - KEY_CONVERTER_SCHEMAS_ENABLE=false
      - VALUE_CONVERTER_SCHEMAS_ENABLE=false
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/" ]
      interval: 10s
      timeout: 5s
      retries: 10

  connector-init:
    image: curlimages/curl:7.85.0
    depends_on:
      connect:
        condition: service_healthy
    volumes:
      - ./infra/connect/register-orders-connector.json:/register-orders-connector.json:ro
    restart: "no"
    command: |
      /bin/sh -c '
        echo "Waiting for Kafka Connect to be ready…";
        until curl -sf http://connect:8083/; do
          echo "[init] still waiting…"; sleep 2;
        done
        echo "[init] Registering Debezium connector…";
        curl -X POST -H "Content-Type: application/json" \
             --data @/register-orders-connector.json \
             http://connect:8083/connectors;
        echo "[init] verifying connector creation…";
        if curl -sf -o /dev/null http://connect:8083/connectors/mysql-orders-connector; then
          echo "[init] connector created successfully!";
          exit 0;
        else
          echo "[init] ERROR: connector not found after registration"; 
          exit 1;
        fi
      ' 

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # Console UI
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: >
        curl -f -s curl -f http://localhost:9000/minio/health/ready || exit 1
      interval: 3s
      retries: 10

  minio-init:
    image: minio/mc
    container_name: minio-init
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set local http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb local/orders;
      /usr/bin/mc anonymous set public local/orders;
      sleep infinity
      "
    healthcheck:
      test: [ "CMD", "/usr/bin/mc", "ls", "local/orders" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      minio:
        condition: service_healthy

volumes:
  kafka_data:
  minio_data:
